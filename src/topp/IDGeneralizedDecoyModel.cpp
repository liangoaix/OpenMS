// --------------------------------------------------------------------------
//                   OpenMS -- Open-Source Mass Spectrometry
// --------------------------------------------------------------------------
// Copyright The OpenMS Team -- Eberhard Karls University Tuebingen,
// ETH Zurich, and Freie Universitaet Berlin 2002-2013.
//
// This software is released under a three-clause BSD license:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of any author or any participating institution
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// For a full list of authors, refer to the file AUTHORS.
// --------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// --------------------------------------------------------------------------
// $Maintainer: Xiao Liang $
// $Authors: Xiao Liang $
// --------------------------------------------------------------------------

#include <OpenMS/APPLICATIONS/TOPPBase.h>
#include <OpenMS/ANALYSIS/ID/IDGeneralizedDecoyModel.h>
#include <OpenMS/KERNEL/StandardTypes.h>
#include <OpenMS/FORMAT/IdXMLFile.h>

using namespace OpenMS;
using namespace std;

/**
    @page TOPP_IDGeneralizedDecoyModel IDGeneralizedDecoyModel

    @brief Tool to estimate the posterior error rate on peptide level
<CENTER>
    <table>
        <tr>
            <td ALIGN = "center" BGCOLOR="#EBEBEB"> pot. predecessor tools </td>
            <td VALIGN="middle" ROWSPAN=3> \f$ \longrightarrow \f$ FalseDiscoveryRate \f$ \longrightarrow \f$</td>
            <td ALIGN = "center" BGCOLOR="#EBEBEB"> pot. successor tools </td>
        </tr>
        <tr>
            <td VALIGN="middle" ALIGN = "center" ROWSPAN=1> @ref TOPP_MascotAdapter (or other ID engines) </td>
            <td VALIGN="middle" ALIGN = "center" ROWSPAN=2> @ref TOPP_IDFilter </td>
        </tr>
        <tr>
            <td VALIGN="middle" ALIGN = "center" ROWSPAN=1> @ref TOPP_PeptideIndexer </td>
        </tr>
    </table>
</CENTER>

    This TOPP tool can calculate the posterior error probability (PEP) given extened search space.

	PEP definition.

    Prerequisites:
    - When using a combined database of target and decoy hits for validation (thus only using one search run per ID engine), 
      then use @ref TOPP_PeptideIndexer to index an idXML file generated by a search engine adapter, e.g. @ref TOPP_MascotAdapter.
      Otherwise, given only target hits is enough.
      
    @Note When no decoy hits were found (or generalized decoy data is too little), you will get a warning saying something like:<br>
          "FalseDiscoveryRate: #decoy sequences is zero! Setting all target sequences to q-value/FDR 0!"<br>
          This should be a serious concern, since the target/decoy annotation in a previous step has probably a misconfigured database (see @ref TOPP_PeptideIndexer).


    <B>The command line parameters of this tool are:</B>
    @verbinclude TOPP_IDGeneralizedDecoyModel.cli
    <B>INI file documentation of this tool:</B>
    @htmlinclude TOPP_IDGeneralizedDecoyModel.html
*/
// We do not want this class to show up in the docu:
/// @cond TOPPCLASSES

class TOPPIDGeneralizedDecoyModel :
  public TOPPBase
{
public:
  TOPPIDGeneralizedDecoyModel() :
    TOPPBase("IDGeneralizedDecoyModel", "Estimates the posterior error probability on peptide level using generalized decoy searches.")
  {
  }

protected:
  Param getSubsectionDefaults_(const String & /*section*/) const
  {
    return IDGeneralizedDecoyModel().getDefaults();
  }

  void registerOptionsAndFlags_()
  {
    registerInputFile_("in", "<file>", "", "Identification input file which contains a search against "
                       "a concatenated sequence database. "
                       "Either specify '-in' alone or 'fwd_in' together with 'rev_in' as input.");
    setValidFormats_("in", ListUtils::create<String>("idXML"));
    registerOutputFile_("out", "<file>", "", "Identification output with annotated PEP or q-values");
    setValidFormats_("out", ListUtils::create<String>("idXML"));
    registerSubsection_("algorithm", "Parameter section for the FDR calculation algorithm");

    addEmptyLine_();
  }

  ExitCodes main_(int, const char **)
  {
    //-------------------------------------------------------------
    // parameter handling
    //-------------------------------------------------------------

    Param alg_param = getParam_().copy("algorithm:", true);
    IDGeneralizedDecoyModel generalized_decoy;

    if (!alg_param.empty())
    {
      generalized_decoy.setParameters(alg_param);
      writeDebug_("Parameters passed to IDGeneralizedDecoyModel", alg_param, 3);
    }

    //input/output files
    String in(getStringOption_("in"));
    bool combined(false);
      if (in != "")
      {
        combined = true;
      }
      else
      {
        writeLog_("Error, at least 'in' must be given");
        return ILLEGAL_PARAMETERS;
      }
    String out(getStringOption_("out"));
    //-------------------------------------------------------------
    // loading input
    //-------------------------------------------------------------

    if (combined)         // -in was given
    {
      vector<PeptideIdentification> pep_ids;
      vector<ProteinIdentification> prot_ids;
      IdXMLFile().load(in, prot_ids, pep_ids);
      try
      {
		  generalized_decoy.apply(pep_ids);
      }
      catch (Exception::MissingInformation)
      {
        LOG_FATAL_ERROR << "IDGeneralizedDecoyModel failed due to missing information (see above).\n";
        return INCOMPATIBLE_INPUT_DATA;
      }

      
      for (vector<ProteinIdentification>::iterator it = prot_ids.begin(); it != prot_ids.end(); ++it)
      {
        it->assignRanks();
      }
      for (vector<PeptideIdentification>::iterator it = pep_ids.begin(); it != pep_ids.end(); ++it)
      {
        it->assignRanks();
      }

      IdXMLFile().store(out, prot_ids, pep_ids);
    }
    return EXECUTION_OK;
  }
};

int main(int argc, const char ** argv)
{
  TOPPIDGeneralizedDecoyModel tool;
  return tool.main(argc, argv);
}

/// @endcond

